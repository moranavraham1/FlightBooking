name: Flight Booking CI Pipeline

# Trigger the workflow on push or pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Uninstall existing Node.js and clear cache
      - name: Remove existing Node.js installation and clear cache
        run: |
          sudo rm -rf /opt/hostedtoolcache/node
          sudo rm -rf ~/.npm
          sudo rm -rf ~/.cache

      # Step 3: Reinstall Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Step 4: Verify Node.js Installation
      - name: Verify Node.js installation
        run: |
          node -v
          npm -v

      # Step 5: Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./flight-booking-backend
        run: npm install

      # Step 6: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.19.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 7: Cleanup previous containers (stop and remove existing containers)
      - name: Cleanup previous containers
        run: |
          docker-compose down || true
          docker ps -a -q | xargs docker stop || true
          docker ps -a -q | xargs docker rm || true

      # Step 8: Set up Docker Buildx (to use Docker compose)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 9: Build and run Docker Compose for backend and PostgreSQL
      - name: Build and Run Backend with Docker Compose
        working-directory: ./flight-booking-backend
        run: |
          docker-compose down || true
          docker-compose up -d --build
        

      # Step 10: Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./flight-booking-frontend
        run: npm install

      # Step 11: Start frontend server in the background
      - name: Start frontend server
        working-directory: ./flight-booking-frontend
        run: npm start &
      
      - name: Run Backend Tests
        working-directory: ./flight-booking-backend
        run: |
          docker-compose exec -T backend npm run test-docker

      

      # Step 13: Run Cypress tests (frontend testing)
      - name: Run Cypress Tests
        working-directory: ./flight-booking-frontend
        run: npx cypress run

      # Step 14: Tear down Docker services
      - name: Tear Down Docker Compose
        working-directory: ./flight-booking-backend
        run: docker-compose down

